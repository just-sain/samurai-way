{"version":3,"file":"static/js/544.8be8faa9.chunk.js","mappings":"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","sources":["webpack:///./src/components/Login/Form/Form.module.scss?b66d","components/Login/Form/Form.tsx","webpack:///./src/components/Login/Login.module.scss?4086","components/Login/Login.tsx","hooks/useTypedSelector.ts","webpack:///./src/assets/styles/errors.module.scss?8f1f"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__RVMwV\",\"formBlock\":\"Form_formBlock__zM+It\",\"showPassword\":\"Form_showPassword__qZvPC\",\"checkbox\":\"Form_checkbox__KqaLx\",\"blockBtns\":\"Form_blockBtns__Q1ku9\",\"blockCaptcha\":\"Form_blockCaptcha__41M14\",\"button\":\"Form_button__cpoth\"};","import React from 'react'\r\nimport { SubmitHandler, useForm } from 'react-hook-form'\r\n\r\nimport s from './Form.module.scss'\r\nimport errorStyle from '../../../assets/styles/errors.module.scss'\r\n\r\ntype TFormValues = {\r\n\temail: string\r\n\tpassword: string\r\n\trememberMe: boolean\r\n\tcaptcha?: string\r\n}\r\ntype TProps = {\r\n\tcaptchaURL: null | string\r\n\tmessages: Array<string>\r\n\tlogin: (email: string, password: string, rememberMe: boolean, captcha?: null | string) => void\r\n}\r\n\r\nconst Form = (props: TProps) => {\r\n\tconst {\r\n\t\tregister,\r\n\t\thandleSubmit,\r\n\t\tformState: { errors }\r\n\t} = useForm<TFormValues>({ mode: 'onBlur' })\r\n\r\n\tconst onSubmit: SubmitHandler<TFormValues> = data => {\r\n\t\tprops.login(data.email, data.password, data.rememberMe, data.captcha)\r\n\t}\r\n\r\n\tconst disableEnterKey = (e: React.KeyboardEvent<HTMLElement>) => {\r\n\t\tif (e.key == 'Enter') {\r\n\t\t\te.preventDefault()\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form className={s.form} onSubmit={handleSubmit(onSubmit)} onKeyDown={disableEnterKey}>\r\n\t\t\t<div className={s.formBlock}>\r\n\t\t\t\t<input\r\n\t\t\t\t\t{...register('email', {\r\n\t\t\t\t\t\trequired: 'Email field is required!',\r\n\t\t\t\t\t\tpattern: {\r\n\t\t\t\t\t\t\tvalue: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n\t\t\t\t\t\t\tmessage: 'Email is wrong!'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})}\r\n\t\t\t\t\t// autoComplete='off' // off suggestions\r\n\t\t\t\t\tclassName={s.formPasswd}\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tplaceholder='Email'\r\n\t\t\t\t/>\r\n\t\t\t\t<div className={`${errorStyle.error} ${errors.email && errorStyle.show}`}>\r\n\t\t\t\t\t<span>{errors.email && errors.email.message}</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className={s.formBlock}>\r\n\t\t\t\t<input\r\n\t\t\t\t\t{...register('password', {\r\n\t\t\t\t\t\trequired: 'Password field is required!',\r\n\t\t\t\t\t\tminLength: { value: 4, message: `Password max length is 4` },\r\n\t\t\t\t\t\tmaxLength: { value: 20, message: `Password max length is 20` }\r\n\t\t\t\t\t})}\r\n\t\t\t\t\tclassName={s.formPasswd}\r\n\t\t\t\t\ttype='password'\r\n\t\t\t\t\tplaceholder='Password'\r\n\t\t\t\t/>\r\n\t\t\t\t<div className={`${errorStyle.error} ${errors.password && errorStyle.show}`}>\r\n\t\t\t\t\t<span>{errors.password && errors.password.message}</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className={s.formBlock}>\r\n\t\t\t\t<label>\r\n\t\t\t\t\t<input {...register('rememberMe')} className={s.checkbox} name='rememberMe' type='checkbox' style={{ marginRight: '1rem' }} />\r\n\t\t\t\t\tRemember Me\r\n\t\t\t\t</label>\r\n\t\t\t</div>\r\n\r\n\t\t\t{/* form errors */}\r\n\t\t\t{props.messages.length !== 0 && (\r\n\t\t\t\t<div className={errorStyle.formError}>\r\n\t\t\t\t\t{props.messages.map((text, index) => (\r\n\t\t\t\t\t\t<p key={index}>{text}</p>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t{props.captchaURL && (\r\n\t\t\t\t<div className={`${s.formBlock} ${s.blockCaptcha}`}>\r\n\t\t\t\t\t<h3>Complete the captcha</h3>\r\n\t\t\t\t\t<img src={props.captchaURL} alt='' />\r\n\t\t\t\t\t<div className={s.formBlock}>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t{...register('captcha', { required: 'Captcha field is required!' })}\r\n\t\t\t\t\t\t\tautoComplete='off'\r\n\t\t\t\t\t\t\tclassName={s.checkbox}\r\n\t\t\t\t\t\t\tname='captcha'\r\n\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<div className={`${errorStyle.error} ${errors.captcha && errorStyle.show}`}>\r\n\t\t\t\t\t\t\t<span>{errors.captcha && errors.captcha.message}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\r\n\t\t\t<div className={`${s.formBlock} ${s.blockBtns}`}>\r\n\t\t\t\t<button className={s.button} type='submit'>\r\n\t\t\t\t\tLogin\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default Form\r\n","// extracted by mini-css-extract-plugin\nexport default {\"loginPage\":\"Login_loginPage__fWN+g\",\"wrapper\":\"Login_wrapper__hZcDO\",\"register\":\"Login_register__3L8SZ\"};","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { Navigate } from 'react-router-dom'\r\nimport { useTypedSelector } from '../../hooks/useTypedSelector'\r\n// actions thunks\r\nimport { loginThunk } from '../../redux/authReducer'\r\n// selectors\r\nimport { getAuth, getCaptchaURL, getDataID, getLoginErrorMessages } from '../../selectors/auth-selectors'\r\n// types\r\nimport { AppDispatchType } from '../../redux/redux-store'\r\n// component\r\nimport Form from './Form/Form'\r\n// styles\r\nimport s from './Login.module.scss'\r\n\r\nconst Login = () => {\r\n\tconst isAuth = useTypedSelector(getAuth),\r\n\t\tuserID = useTypedSelector(getDataID),\r\n\t\tmessages = useTypedSelector(getLoginErrorMessages),\r\n\t\tcaptchaURL = useTypedSelector(getCaptchaURL)\r\n\r\n\tconst dispatch = useDispatch<AppDispatchType>()\r\n\r\n\tconst login = (email: string, password: string, rememberMe: boolean, captcha?: null | string) => {\r\n\t\tdispatch(loginThunk(email, password, rememberMe, captcha))\r\n\t}\r\n\r\n\tif (isAuth) {\r\n\t\treturn <Navigate to={`/profile/${userID}`} />\r\n\t}\r\n\treturn (\r\n\t\t<section className={s.loginPage}>\r\n\t\t\t<div className={s.wrapper}>\r\n\t\t\t\t<h3>Login</h3>\r\n\t\t\t\t<Form login={login} captchaURL={captchaURL} messages={messages} />\r\n\t\t\t\t<p className={s.register}>\r\n\t\t\t\t\tdon't have an account? <a href='https://social-network.samuraijs.com/login'>register</a>\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default Login\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux'\r\nimport { AppStateType } from '../redux/redux-store'\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<AppStateType> = useSelector\r\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"errors_error__ax-p2\",\"show\":\"errors_show__p2dN5\",\"showTop\":\"errors_showTop__uRXa+\",\"formError\":\"errors_formError__LdLkJ\"};"],"names":["props","useForm","mode","register","handleSubmit","errors","formState","className","s","onSubmit","data","login","email","password","rememberMe","captcha","onKeyDown","e","key","preventDefault","required","pattern","value","message","type","placeholder","errorStyle","minLength","maxLength","name","style","marginRight","messages","length","map","text","index","captchaURL","src","alt","autoComplete","isAuth","useTypedSelector","getAuth","userID","getDataID","getLoginErrorMessages","getCaptchaURL","dispatch","useDispatch","to","loginThunk","href","useSelector"],"sourceRoot":""}