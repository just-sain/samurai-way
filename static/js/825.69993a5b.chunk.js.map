{"version":3,"file":"static/js/825.69993a5b.chunk.js","mappings":"2JAKaA,EAAkB,WAC9B,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAoBC,EAAAA,EAAAA,GAAiBC,EAAAA,IAM3C,MAAO,CAAEC,YAJW,WACR,OAAPH,GAAaF,EAAS,c,yDCPfG,E,QAAuDG,I,mGCDvDC,EAAkB,SAACC,GAAD,OAAyBA,EAAMC,SAASC,U,uCCiDvE,EAvCuB,SAACC,GACvB,OAKIC,EAAAA,EAAAA,MAJHC,EADD,EACCA,SACAC,EAFD,EAECA,WACAC,EAHD,EAGCA,aAHD,IAICC,UAAaC,EAJd,EAIcA,OAAQC,EAJtB,EAIsBA,QAQtB,OACC,kBAAMC,SAAUJ,GAN4B,SAAAK,GAC5CT,EAAMU,YAAYD,EAAKE,SACvBR,EAAW,cAIX,WACC,iBAAKS,UAAU,WAAf,WACC,oCACKV,EAAS,UAAW,CAAEW,SAAU,6CADrC,IAECD,UAAU,iRACVE,KAAK,OACLC,aAAa,MACbC,MAAO,CAAEC,SAAU,UACnBC,YAAY,mBAEb,gBAAKN,UAAS,UAAKO,EAAAA,EAAAA,MAAL,YAAyBb,EAAOK,SAAWQ,EAAAA,EAAAA,SAAzD,UACC,0BAAOb,EAAOK,SAAWL,EAAOK,QAAQA,gBAG1C,mBACCS,UAAWb,EACXK,UAAU,sHACVI,MAAO,CAAEK,OAAQ,WACjBP,KAAK,SAJN,sBCpBH,EAZgB,SAACd,GAChB,OACC,iBAAKY,UAAU,mBAAf,WACC,iBAAKA,UAAU,OAAf,WACC,gBAAKA,UAAU,yBAAyBU,IAAKtB,EAAMuB,MAAOC,IAAI,MAC9D,uBAAIxB,EAAMyB,eAEX,uBAAIzB,EAAMW,cCEb,EARiB,SAACX,GACjB,IAAMD,EAAWC,EAAMD,SAAS2B,KAAI,SAACf,EAASgB,GAAV,OACnC,SAAC,EAAD,CAAiBF,SAAUd,EAAQc,SAAUF,MAAOZ,EAAQY,MAAOZ,QAASA,EAAQA,SAAtEgB,MAGf,OAAO,gBAAKX,MAAO,CAAEY,OAAQ,OAAQC,UAAW,QAAzC,SAAoD9B,KCO5D,EATa,SAACC,GACb,OACC,qBAASY,UAAU,YAAYI,MAAO,CAAEY,OAAQ,OAAQE,cAAe,SAAUC,eAAgB,gBAAiBC,WAAY,WAA9H,WACC,SAAC,EAAD,CAAUjC,SAAUC,EAAMiC,gBAC1B,SAAC,EAAD,CAAgBvB,YAAaV,EAAMU,kB,oBC2BtC,EAzBiB,WAChB,IAAQhB,GAAgBN,EAAAA,EAAAA,KAAhBM,aACRwC,EAAAA,EAAAA,YAAU,WACTxC,MACE,IACH,IAAMuC,GAAetC,EAAAA,EAAAA,IAAYC,GAC3BuC,GAAWC,EAAAA,EAAAA,OAEjBF,EAAAA,EAAAA,YAAU,WAGT,OAFAC,GAASE,EAAAA,EAAAA,OAEF,WACNF,GAASG,EAAAA,EAAAA,OACTH,EAASI,EAAAA,GAAAA,kBAER,IAMH,OAA4B,IAAxBN,EAAaO,QAAqB,SAACC,EAAA,EAAD,KAC/B,SAAC,EAAD,CAAMR,aAAcA,EAAcvB,YALrB,SAACC,GACpBwB,GAASO,EAAAA,EAAAA,IAAiB/B,S,mBCnC5B,KAAgB,MAAQ,sBAAsB,KAAO,qBAAqB,QAAU,wBAAwB,UAAY","sources":["hooks/useAuthNavigate.tsx","hooks/useTypedSelector.ts","selectors/chat-selectors.ts","components/Chat/AddMessageForm/AddMessageForm.tsx","components/Chat/Messages/Message/Message.tsx","components/Chat/Messages/Messages.tsx","components/Chat/Chat.tsx","pages/ChatPage.tsx","webpack:///./src/assets/styles/errors.module.scss?8f1f"],"sourcesContent":["import { useNavigate } from 'react-router-dom'\r\nimport { useTypedSelector } from './useTypedSelector'\r\n\r\nimport { getDataID } from '../selectors/auth-selectors'\r\n\r\nexport const useAuthNavigate = () => {\r\n\tconst navigate = useNavigate()\r\n\tconst id: number | null = useTypedSelector(getDataID)\r\n\r\n\tconst checkIfAuth = () => {\r\n\t\tif (id === null) navigate('/login')\r\n\t}\r\n\r\n\treturn { checkIfAuth }\r\n}\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux'\r\nimport { AppStateType } from '../redux/redux-store'\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<AppStateType> = useSelector\r\n","import { AppStateType } from '../redux/redux-store'\r\n\r\nexport const getChatMessages = (state: AppStateType) => state.chatPage.messages\r\n","import React from 'react'\r\nimport { useForm, SubmitHandler } from 'react-hook-form'\r\n\r\nimport errorStyle from '../../../assets/styles/errors.module.scss'\r\n\r\ntype TFormValues = {\r\n\tmessage: string\r\n}\r\ntype TProps = {\r\n\tsendMessage: (message: string) => void\r\n}\r\n\r\nconst AddMessageForm = (props: TProps) => {\r\n\tconst {\r\n\t\tregister,\r\n\t\tresetField,\r\n\t\thandleSubmit,\r\n\t\tformState: { errors, isDirty }\r\n\t} = useForm<TFormValues>()\r\n\r\n\tconst onSubmit: SubmitHandler<TFormValues> = data => {\r\n\t\tprops.sendMessage(data.message)\r\n\t\tresetField('message')\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t<div className='relative'>\r\n\t\t\t\t<input\r\n\t\t\t\t\t{...register('message', { required: 'for send the message pls fill the input' })}\r\n\t\t\t\t\tclassName='mt-14 mb-5 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500'\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tautoComplete='off'\r\n\t\t\t\t\tstyle={{ fontSize: '1.4rem' }}\r\n\t\t\t\t\tplaceholder='your text...'\r\n\t\t\t\t/>\r\n\t\t\t\t<div className={`${errorStyle.error} ${errors.message && errorStyle.showTop}`}>\r\n\t\t\t\t\t<span>{errors.message && errors.message.message}</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<button\r\n\t\t\t\tdisabled={!isDirty}\r\n\t\t\t\tclassName='text-center text-indigo-400 font-bold rounded py-2 w-2/12 focus:outline-none bg-gray-900 border-2 border-indigo-400'\r\n\t\t\t\tstyle={{ cursor: 'pointer' }}\r\n\t\t\t\ttype='submit'>\r\n\t\t\t\tsend\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default AddMessageForm\r\n","import React from 'react'\r\n\r\ntype TProps = {\r\n\tuserName: string\r\n\tphoto: string\r\n\tmessage: string\r\n}\r\n\r\nconst Message = (props: TProps) => {\r\n\treturn (\r\n\t\t<div className='p-4 mb-4 text-xm'>\r\n\t\t\t<div className='flex'>\r\n\t\t\t\t<img className='w-12 h-12 mr-5 rounded' src={props.photo} alt='' />\r\n\t\t\t\t<p>{props.userName}</p>\r\n\t\t\t</div>\r\n\t\t\t<p>{props.message}</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\n\r\nimport Message from './Message/Message'\r\nimport { TChatMessage } from '../../../pages/ChatPage'\r\n\r\ntype TProps = {\r\n\tmessages: TChatMessage[]\r\n}\r\n\r\nconst Messages = (props: TProps) => {\r\n\tconst messages = props.messages.map((message, i) => (\r\n\t\t<Message key={i} userName={message.userName} photo={message.photo} message={message.message} />\r\n\t))\r\n\r\n\treturn <div style={{ height: '60vh', overflowY: 'auto' }}>{messages}</div>\r\n}\r\n\r\nexport default Messages\r\n","import React from 'react'\r\n// components\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm'\r\nimport Messages from './Messages/Messages'\r\n// types\r\nimport { TChatMessage } from '../../pages/ChatPage'\r\n\r\ntype TProps = {\r\n\tsendMessage: (message: string) => void\r\n\tchatMessages: TChatMessage[]\r\n}\r\n\r\nconst Chat = (props: TProps) => {\r\n\treturn (\r\n\t\t<section className='p-10 flex' style={{ height: '100%', flexDirection: 'column', justifyContent: 'space-between', alignItems: 'stretch' }}>\r\n\t\t\t<Messages messages={props.chatMessages} />\r\n\t\t\t<AddMessageForm sendMessage={props.sendMessage} />\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default Chat\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// actions, thunks\r\nimport { chatActions, startMessagesListeningThunk, stopMessagesListeningThunk, sendMessageThunk } from '../redux/chatReducer'\r\nimport { AppDispatchType } from '../redux/redux-store' //types\r\nimport { getChatMessages } from '../selectors/chat-selectors' // selectors\r\n// components\r\nimport Chat from '../components/Chat/Chat'\r\nimport Preloader from '../components/common/Preloader/Preloader'\r\nimport { useAuthNavigate } from '../hooks/useAuthNavigate'\r\n\r\nexport type TChatMessage = {\r\n\tmessage: string\r\n\tphoto: string\r\n\tuserId: number\r\n\tuserName: string\r\n}\r\n\r\nconst ChatPage = () => {\r\n\tconst { checkIfAuth } = useAuthNavigate()\r\n\tuseEffect(() => {\r\n\t\tcheckIfAuth()\r\n\t}, [])\r\n\tconst chatMessages = useSelector(getChatMessages)\r\n\tconst dispatch = useDispatch<AppDispatchType>()\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(startMessagesListeningThunk())\r\n\r\n\t\treturn () => {\r\n\t\t\tdispatch(stopMessagesListeningThunk())\r\n\t\t\tdispatch(chatActions.pageUpdated())\r\n\t\t}\r\n\t}, [])\r\n\r\n\tconst sendMessage = (message: string) => {\r\n\t\tdispatch(sendMessageThunk(message))\r\n\t}\r\n\r\n\tif (chatMessages.length === 0) return <Preloader />\r\n\treturn <Chat chatMessages={chatMessages} sendMessage={sendMessage} />\r\n}\r\n\r\nexport default ChatPage\r\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"errors_error__ax-p2\",\"show\":\"errors_show__p2dN5\",\"showTop\":\"errors_showTop__uRXa+\",\"formError\":\"errors_formError__LdLkJ\"};"],"names":["useAuthNavigate","navigate","useNavigate","id","useTypedSelector","getDataID","checkIfAuth","useSelector","getChatMessages","state","chatPage","messages","props","useForm","register","resetField","handleSubmit","formState","errors","isDirty","onSubmit","data","sendMessage","message","className","required","type","autoComplete","style","fontSize","placeholder","errorStyle","disabled","cursor","src","photo","alt","userName","map","i","height","overflowY","flexDirection","justifyContent","alignItems","chatMessages","useEffect","dispatch","useDispatch","startMessagesListeningThunk","stopMessagesListeningThunk","chatActions","length","Preloader","sendMessageThunk"],"sourceRoot":""}