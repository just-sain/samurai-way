{"version":3,"file":"static/js/120.b886ce05.chunk.js","mappings":"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","sources":["webpack:///./src/components/Settings/ProfileSettings/Form/Form.module.scss?8e3d","components/Settings/ProfileSettings/Form/Form.tsx","webpack:///./src/components/Settings/ProfileSettings/ProfileSettings.module.scss?df17","components/Settings/ProfileSettings/ProfileSettings.tsx","hooks/useAuthNavigate.tsx","hooks/useTypedSelector.ts","selectors/profile-selectors.ts","webpack:///./src/assets/styles/errors.module.scss?8f1f"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__R+k8y\",\"formSection\":\"Form_formSection__dItYe\",\"_avatar\":\"Form__avatar__76MqO\",\"_desc\":\"Form__desc__d88G7\",\"formBlock\":\"Form_formBlock__tIJSh\",\"checkbox\":\"Form_checkbox__vnAeI\",\"blockBtns\":\"Form_blockBtns__X0oOA\",\"button\":\"Form_button__x0S3s\"};","import React, { memo, useEffect, useMemo } from 'react'\r\nimport { SubmitHandler, useForm, useFormState } from 'react-hook-form'\r\n\r\n// types\r\nimport { TContacts, TProfile, TUpdateProfile } from '../../../../types/types'\r\n// styles\r\nimport s from './Form.module.scss'\r\nimport errorStyle from '../../../../assets/styles/errors.module.scss'\r\nimport undefinedPhoto from '../../../../assets/img/blank-profile-picture.webp'\r\n\r\ntype TFormValues = {\r\n\tfullName: string\r\n\taboutMe: string\r\n\tisLookingForAJob: boolean\r\n\tskills: string\r\n\tcontacts: TContacts\r\n\tstatus: string\r\n\tphoto: File\r\n}\r\ntype TProps = {\r\n\tid: number\r\n\tprofile: TProfile\r\n\tstatus: string\r\n\tmessages: Array<string>\r\n\tupdateStatus: (status: string) => void\r\n\tsaveProfile: (profileData: TUpdateProfile) => void\r\n\tsavePhoto: (photo: File) => void\r\n}\r\n\r\nconst Form = (props: TProps) => {\r\n\tconst defaultValues = {\r\n\t\tfullName: !props.profile.fullName ? '' : props.profile.fullName,\r\n\t\taboutMe: !props.profile.aboutMe ? '' : props.profile.aboutMe,\r\n\t\tstatus: !props.status ? '' : props.status,\r\n\t\tisLookingForAJob: !props.profile.lookingForAJob ? false : props.profile.lookingForAJob,\r\n\t\tskills: !props.profile.lookingForAJobDescription ? '' : props.profile.lookingForAJobDescription,\r\n\t\tcontacts: { ...props.profile.contacts }\r\n\t}\r\n\tconst {\r\n\t\thandleSubmit,\r\n\t\tregister,\r\n\t\tcontrol,\r\n\t\treset,\r\n\t\tgetValues,\r\n\t\tformState: { errors }\r\n\t} = useForm<TFormValues>({\r\n\t\tmode: 'onBlur',\r\n\t\tdefaultValues: useMemo(() => defaultValues, [props.profile, props.status])\r\n\t})\r\n\tconst { isDirty } = useFormState({ control })\r\n\r\n\tconst onSubmit: SubmitHandler<TFormValues> = data => {\r\n\t\tprops.saveProfile({\r\n\t\t\tfullName: data.fullName,\r\n\t\t\taboutMe: data.aboutMe,\r\n\t\t\tlookingForAJob: data.isLookingForAJob,\r\n\t\t\tlookingForAJobDescription: data.skills,\r\n\t\t\tcontacts: { ...props.profile.contacts }\r\n\t\t})\r\n\t\tprops.updateStatus(data.status)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\treset(getValues())\r\n\t}, [props.profile, props.status])\r\n\r\n\tconst capitalizeLetter = (string: string) => {\r\n\t\treturn string.charAt(0).toUpperCase() + string.slice(1)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form className={`${s.form}`} onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t<div className={`${s.formSection} ${s._avatar}`}>\r\n\t\t\t\t{/* avatar */}\r\n\t\t\t\t<div className={s.formBlock}>\r\n\t\t\t\t\tAvatar\r\n\t\t\t\t\t<img src={!props.profile.photos?.large ? undefinedPhoto : props.profile.photos.large} alt='' />\r\n\t\t\t\t\t<div className={s.formBlock}>\r\n\t\t\t\t\t\tChoose photo <input {...register('photo')} type='file' accept='image/jpeg, image/png' />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* immutable block with id  */}\r\n\t\t\t\t<div className={s.formBlock}>\r\n\t\t\t\t\t{'id: '}\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t{props.profile.userId}\r\n\t\t\t\t\t\t<i> (immutable)</i>\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className={`${s.formSection} ${s._desc}`}>\r\n\t\t\t\t{/* fullName */}\r\n\t\t\t\t<div className={s.formBlock}>\r\n\t\t\t\t\tFull name\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\t{...register('fullName', {\r\n\t\t\t\t\t\t\trequired: 'full name field is required!',\r\n\t\t\t\t\t\t\tmaxLength: {\r\n\t\t\t\t\t\t\t\tvalue: 50,\r\n\t\t\t\t\t\t\t\tmessage: 'job description field max length is 50'\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Full name'\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className={`${errorStyle.error} ${errors.fullName && errorStyle.showTop}`}>\r\n\t\t\t\t\t\t<span>{errors.fullName && errors.fullName.message}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* aboutMe */}\r\n\t\t\t\t<div className={s.formBlock}>\r\n\t\t\t\t\tAbout me\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\t{...register('aboutMe', {\r\n\t\t\t\t\t\t\tmaxLength: {\r\n\t\t\t\t\t\t\t\tvalue: 1000,\r\n\t\t\t\t\t\t\t\tmessage: 'job description field max length is 1000'\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='About me'\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className={`${errorStyle.error} ${errors.aboutMe && errorStyle.showTop}`}>\r\n\t\t\t\t\t\t<span>{errors.aboutMe && errors.aboutMe.message}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* status */}\r\n\t\t\t\t<div className={s.formBlock}>\r\n\t\t\t\t\tStatus\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\t{...register('status', {\r\n\t\t\t\t\t\t\tmaxLength: {\r\n\t\t\t\t\t\t\t\tvalue: 300,\r\n\t\t\t\t\t\t\t\tmessage: 'job description field max length is 300'\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Status'\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className={`${errorStyle.error} ${errors.status && errorStyle.showTop}`}>\r\n\t\t\t\t\t\t<span>{errors.status && errors.status.message}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* lookingForAJob */}\r\n\t\t\t\t<div className={s.formBlock}>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t{...register('isLookingForAJob')}\r\n\t\t\t\t\t\t\tclassName={s.checkbox}\r\n\t\t\t\t\t\t\tname='isLookingForAJob'\r\n\t\t\t\t\t\t\ttype='checkbox'\r\n\t\t\t\t\t\t\tstyle={{ marginRight: '1rem' }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\tLooking for a job\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* job description/skills */}\r\n\t\t\t\t<div className={s.formBlock}>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\tSkills\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t{...register('skills', {\r\n\t\t\t\t\t\t\t\tmaxLength: {\r\n\t\t\t\t\t\t\t\t\tvalue: 300,\r\n\t\t\t\t\t\t\t\t\tmessage: 'job description field max length is 300'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\tplaceholder='Your skills'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<div className={`${errorStyle.error} ${errors.skills && errorStyle.showTop}`}>\r\n\t\t\t\t\t\t<span>{errors.skills && errors.skills.message}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* contacts */}\r\n\t\t\t\t{Object.keys(props.profile.contacts).map(key => (\r\n\t\t\t\t\t<div className={s.formBlock} key={key}>\r\n\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t<span style={{ textTransform: 'capitalize' }}>{key === 'mainLink' ? 'Main' : capitalizeLetter(key)}</span>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t{...register(`contacts.${key}`)}\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tplaceholder={`${key === 'mainLink' ? 'Main' : capitalizeLetter(key)} link`}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\r\n\t\t\t\t{\r\n\t\t\t\t\t// form errors\r\n\t\t\t\t\tprops.messages.length !== 0 && (\r\n\t\t\t\t\t\t<div className={errorStyle.formError}>\r\n\t\t\t\t\t\t\t{props.messages.map((text, index) => (\r\n\t\t\t\t\t\t\t\t<p key={index}>{text}</p>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{/* button */}\r\n\t\t\t\t<div className={`${s.formBlock} ${s.blockBtns}`}>\r\n\t\t\t\t\t{isDirty ? (\r\n\t\t\t\t\t\t<button className={s.button} type='submit'>\r\n\t\t\t\t\t\t\tSave\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<button className={s.button} disabled type='submit'>\r\n\t\t\t\t\t\t\tSave\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default memo(Form)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"ProfileSettings_section__71WlR\",\"title\":\"ProfileSettings_title__bMAHy\"};","import React, { memo, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useTypedSelector } from '../../../hooks/useTypedSelector'\r\nimport { useAuthNavigate } from '../../../hooks/useAuthNavigate'\r\n// actions and thunks\r\nimport { getFullProfileThunk, savePhotoThunk, updateStatusThunk, saveProfileThunk } from '../../../redux/profileReducer'\r\n// selectors\r\nimport { getErrorMessages, getProfile, getStatus } from '../../../selectors/profile-selectors'\r\nimport { getAuth, getDataID } from '../../../selectors/auth-selectors'\r\n// types\r\nimport { TUpdateProfile } from '../../../types/types'\r\nimport { AppDispatchType } from '../../../redux/redux-store'\r\n// components\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport Form from './Form/Form'\r\n// styles\r\nimport s from './ProfileSettings.module.scss'\r\nimport withAuthNavigate from '../../../hoc/withAuthNavigate'\r\n\r\nconst ProfileSettings = () => {\r\n\tconst { checkIfAuth } = useAuthNavigate()\r\n\tuseEffect(() => {\r\n\t\tcheckIfAuth()\r\n\t}, [])\r\n\t// selectors\r\n\tconst id = useTypedSelector(getDataID) as number,\r\n\t\tprofile = useTypedSelector(getProfile),\r\n\t\tstatus = useTypedSelector(getStatus),\r\n\t\tmessages = useTypedSelector(getErrorMessages)\r\n\r\n\t// dispatch\r\n\tconst dispatch = useDispatch<AppDispatchType>(),\r\n\t\tupdateStatus = (status: string) => dispatch(updateStatusThunk(status)),\r\n\t\tsaveProfile = (profileData: TUpdateProfile) => dispatch(saveProfileThunk(profileData)),\r\n\t\tsavePhoto = (photo: File) => dispatch(savePhotoThunk(photo))\r\n\r\n\t// component did mount\r\n\tuseEffect(() => {\r\n\t\tif (profile?.userId !== id) {\r\n\t\t\tdispatch(getFullProfileThunk(id))\r\n\t\t}\r\n\t}, [])\r\n\r\n\t// return\r\n\tif (!profile || !status) return <Preloader />\r\n\treturn (\r\n\t\t<section className={s.section}>\r\n\t\t\t<h1 className={s.title}>Profile Settings</h1>\r\n\t\t\t<Form\r\n\t\t\t\tid={id}\r\n\t\t\t\tprofile={profile}\r\n\t\t\t\tstatus={status}\r\n\t\t\t\tmessages={messages}\r\n\t\t\t\tupdateStatus={updateStatus}\r\n\t\t\t\tsavePhoto={savePhoto}\r\n\t\t\t\tsaveProfile={saveProfile}\r\n\t\t\t/>\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default memo(ProfileSettings)\r\n","import { useNavigate } from 'react-router-dom'\r\nimport { useTypedSelector } from './useTypedSelector'\r\n\r\nimport { getDataID } from '../selectors/auth-selectors'\r\n\r\nexport const useAuthNavigate = () => {\r\n\tconst navigate = useNavigate()\r\n\tconst id: number | null = useTypedSelector(getDataID)\r\n\r\n\tconst checkIfAuth = () => {\r\n\t\tif (id === null) navigate('/login')\r\n\t}\r\n\r\n\treturn { checkIfAuth }\r\n}\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux'\r\nimport { AppStateType } from '../redux/redux-store'\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<AppStateType> = useSelector\r\n","import { AppStateType } from '../redux/redux-store'\r\n\r\nexport const getProfile = (state: AppStateType) => state.profilePage.profile\r\nexport const getStatus = (state: AppStateType) => state.profilePage.status\r\nexport const getPosts = (state: AppStateType) => state.profilePage.posts\r\nexport const getErrorMessages = (state: AppStateType) => state.errors.profileErrors.messages\r\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"errors_error__ax-p2\",\"show\":\"errors_show__p2dN5\",\"showTop\":\"errors_showTop__uRXa+\",\"formError\":\"errors_formError__LdLkJ\"};"],"names":["Form","props","defaultValues","fullName","profile","aboutMe","status","isLookingForAJob","lookingForAJob","skills","lookingForAJobDescription","contacts","useForm","mode","useMemo","handleSubmit","register","control","reset","getValues","errors","formState","isDirty","useFormState","useEffect","capitalizeLetter","string","charAt","toUpperCase","slice","className","s","onSubmit","data","saveProfile","updateStatus","src","photos","large","undefinedPhoto","alt","type","accept","userId","required","maxLength","value","message","placeholder","errorStyle","name","style","marginRight","Object","keys","map","key","textTransform","messages","length","text","index","disabled","memo","ProfileSettings","checkIfAuth","useAuthNavigate","id","useTypedSelector","getDataID","getProfile","getStatus","getErrorMessages","dispatch","useDispatch","getFullProfileThunk","updateStatusThunk","savePhoto","photo","savePhotoThunk","profileData","saveProfileThunk","Preloader","navigate","useNavigate","useSelector","state","profilePage","getPosts","posts","profileErrors"],"sourceRoot":""}