{"version":3,"file":"static/js/30.87ff5b88.chunk.js","mappings":"qKAEaA,EAAa,SAACC,GAAD,OAAyBA,EAAMC,YAAYC,SACxDC,EAAoB,SAACH,GAAD,OAAyBA,EAAMC,YAAYG,U,oBCF5E,EAAuB,yBAAvB,EAAwD,0BAAxD,EAAwF,wBAAxF,EAA4H,8B,SC2C5H,EAhCmB,SAACC,GACnB,OAAmDC,EAAAA,EAAAA,IAAqB,CAAEC,KAAM,WAAxEC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,MAAOC,EAAvC,EAAuCA,QAC/BC,GAAYC,EAAAA,EAAAA,IAAa,CAAEF,QAAAA,IAA3BC,QAOR,OACC,kBAAME,UAAWC,EAAQC,SAAUP,GANS,SAAAQ,GAC5CZ,EAAMa,YAAYD,EAAKE,SACvBT,OAIA,WACC,gBAAKI,UAAWC,EAAhB,UACC,oCACKP,EAAS,UAAW,CAAEY,UAAU,EAAMC,UAAW,MADtD,IAECP,UAAWC,EACXO,KAAK,OACLC,YAAY,uBAGbX,GACA,mBAAQE,UAAWC,EAAOO,KAAK,SAA/B,mBAIA,mBAAQR,UAAWC,EAAOO,KAAK,SAASE,UAAQ,EAAhD,sB,UCnCJ,EAAuB,yBCkBvB,EATmB,SAACnB,GACnB,IAAMoB,EAAO,YAAcpB,EAAMqB,GACjC,OACC,SAAC,KAAD,CAASZ,UAAWC,EAAQY,GAAIF,EAAhC,SACEpB,EAAMuB,YCbV,EAAuB,0BCWvB,EAJoB,SAACvB,GACpB,OAAO,cAAGS,UAAWC,EAAd,SAAuBV,EAAMuB,YCRrC,EAAyB,wBAAzB,EAA2D,yBAA3D,EAA4F,uBAA5F,EAAoI,gCAApI,EAA+K,0BC8C/K,EAhCgB,WACf,IAAM1B,GAAU2B,EAAAA,EAAAA,IAAY9B,GACtBK,GAAWyB,EAAAA,EAAAA,IAAY1B,GAEvB2B,GAA4BC,EAAAA,EAAAA,MAM5BC,EAAc9B,EAAQ+B,KAAI,SAAAC,GAAM,OACrC,SAAC,EAAD,CAA4BR,GAAIQ,EAAOR,GAAvC,SACEQ,EAAOC,MADQD,EAAOR,OAKnBU,EAAehC,EAAS6B,KAAI,SAAAd,GAAO,OAAI,SAAC,EAAD,UAA+BA,EAAQkB,MAArBlB,EAAQO,OAEvE,OACC,qBAASZ,UAAWC,EAApB,WACC,iBAAKD,UAAWC,EAAhB,WACC,eAAID,UAAWC,EAAf,qBACCiB,MAEF,iBAAKlB,UAAWC,EAAhB,WACC,gBAAKD,UAAWC,EAAhB,SAA6BqB,KAC7B,SAAC,EAAD,CAAYlB,YApBK,WACnBY,EAASQ,EAAAA,EAAAA","sources":["selectors/dialogs-selectors.ts","webpack:///./src/components/Dialogs/DialogForm/DialogForm.module.scss?8980","components/Dialogs/DialogForm/DialogForm.tsx","webpack:///./src/components/Dialogs/DialogItem/DialogItem.module.scss?c926","components/Dialogs/DialogItem/DialogItem.tsx","webpack:///./src/components/Dialogs/MessageItem/MessageItem.module.scss?c95d","components/Dialogs/MessageItem/MessageItem.tsx","webpack:///./src/components/Dialogs/Dialogs.module.scss?d037","components/Dialogs/Dialogs.tsx"],"sourcesContent":["import { AppStateType } from '../redux/redux-store'\r\n\r\nexport const getDialogs = (state: AppStateType) => state.dialogsPage.dialogs\r\nexport const getDialogMessages = (state: AppStateType) => state.dialogsPage.messages\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"DialogForm_form__bBjy2\",\"input\":\"DialogForm_input__caukE\",\"btn\":\"DialogForm_btn__zYg7C\",\"formBlock\":\"DialogForm_formBlock__9RwRI\",\"error\":\"DialogForm_error__UdS9F\",\"show\":\"DialogForm_show__zAiTy\"};","import React from 'react'\r\nimport { useForm, useFormState, SubmitHandler } from 'react-hook-form'\r\n\r\nimport s from './DialogForm.module.scss'\r\n\r\ntype TFormValues = {\r\n\tmessage: string\r\n}\r\ntype TProps = {\r\n\tsendMessage: (message: string) => void\r\n}\r\n\r\nconst DialogForm = (props: TProps) => {\r\n\tconst { register, handleSubmit, reset, control } = useForm<TFormValues>({ mode: 'onBlur' })\r\n\tconst { isDirty } = useFormState({ control })\r\n\r\n\tconst onSubmit: SubmitHandler<TFormValues> = data => {\r\n\t\tprops.sendMessage(data.message)\r\n\t\treset()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form className={s.form} onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t<div className={s.formBlock}>\r\n\t\t\t\t<input\r\n\t\t\t\t\t{...register('message', { required: true, maxLength: 50 })}\r\n\t\t\t\t\tclassName={s.input}\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tplaceholder='Print Your Text'\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t{isDirty ? (\r\n\t\t\t\t<button className={s.btn} type='submit'>\r\n\t\t\t\t\tSend\r\n\t\t\t\t</button>\r\n\t\t\t) : (\r\n\t\t\t\t<button className={s.btn} type='submit' disabled>\r\n\t\t\t\t\tSend\r\n\t\t\t\t</button>\r\n\t\t\t)}\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default DialogForm\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"DialogItem_item__XOTCU\",\"_active\":\"DialogItem__active__EqvuC\"};","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport s from './DialogItem.module.scss'\r\n\r\ntype TProps = {\r\n\tid: number\r\n\tchildren: React.ReactNode\r\n}\r\n\r\nconst DialogItem = (props: TProps) => {\r\n\tconst path = '/dialogs/' + props.id\r\n\treturn (\r\n\t\t<NavLink className={s.item} to={path}>\r\n\t\t\t{props.children}\r\n\t\t</NavLink>\r\n\t)\r\n}\r\n\r\nexport default DialogItem\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MessageItem_item__lpkVZ\"};","import React from 'react'\r\n\r\nimport s from './MessageItem.module.scss'\r\n\r\ntype TProps = {\r\n\tchildren: React.ReactNode\r\n}\r\n\r\nconst MessageItem = (props: TProps) => {\r\n\treturn <p className={s.item}>{props.children}</p>\r\n}\r\n\r\nexport default MessageItem\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"Dialogs_dialog__XvbRM\",\"dialogs\":\"Dialogs_dialogs__7P0wv\",\"title\":\"Dialogs_title__UlMZa\",\"correspondence\":\"Dialogs_correspondence__5ge7H\",\"messages\":\"Dialogs_messages__mKp7P\"};","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n// actions\r\nimport { dialogsActions } from '../../redux/dialogsReducer'\r\n// selectors\r\nimport { getDialogMessages, getDialogs } from '../../selectors/dialogs-selectors'\r\n// components\r\nimport DialogForm from './DialogForm/DialogForm'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport MessageItem from './MessageItem/MessageItem'\r\n// types\r\nimport { AppDispatchType } from '../../redux/redux-store'\r\n// styles\r\nimport s from './Dialogs.module.scss'\r\n\r\nconst Dialogs = () => {\r\n\tconst dialogs = useSelector(getDialogs)\r\n\tconst messages = useSelector(getDialogMessages)\r\n\r\n\tconst dispatch: AppDispatchType = useDispatch()\r\n\r\n\tconst sendMessage = () => {\r\n\t\tdispatch(dialogsActions.sendMessage)\r\n\t}\r\n\r\n\tconst dialogsFrag = dialogs.map(dialog => (\r\n\t\t<DialogItem key={dialog.id} id={dialog.id}>\r\n\t\t\t{dialog.name}\r\n\t\t</DialogItem>\r\n\t))\r\n\r\n\tconst messagesFrag = messages.map(message => <MessageItem key={message.id}>{message.text}</MessageItem>)\r\n\r\n\treturn (\r\n\t\t<section className={s.dialog}>\r\n\t\t\t<div className={s.dialogs}>\r\n\t\t\t\t<h1 className={s.title}>Dialogs</h1>\r\n\t\t\t\t{dialogsFrag}\r\n\t\t\t</div>\r\n\t\t\t<div className={s.correspondence}>\r\n\t\t\t\t<div className={s.messages}>{messagesFrag}</div>\r\n\t\t\t\t<DialogForm sendMessage={sendMessage} />\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default Dialogs\r\n"],"names":["getDialogs","state","dialogsPage","dialogs","getDialogMessages","messages","props","useForm","mode","register","handleSubmit","reset","control","isDirty","useFormState","className","s","onSubmit","data","sendMessage","message","required","maxLength","type","placeholder","disabled","path","id","to","children","useSelector","dispatch","useDispatch","dialogsFrag","map","dialog","name","messagesFrag","text","dialogsActions"],"sourceRoot":""}