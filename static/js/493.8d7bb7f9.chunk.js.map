{"version":3,"file":"static/js/493.8d7bb7f9.chunk.js","mappings":"yNACA,EAAuB,uBAAvB,EAA0D,4BAA1D,EAAiG,2BAAjG,EAAkI,sBAAlI,EAAgK,wBAAhK,EAA+L,uB,SC8C/L,EAnCiB,SAACA,GAAgB,IAAD,IAChC,GAKIC,EAAAA,EAAAA,IAAqB,CAAEC,KAAM,WAJhCC,EADD,EACCA,SACAC,EAFD,EAECA,aACAC,EAHD,EAGCA,MACaC,EAJd,EAICC,UAAaD,OAQd,OACC,kBAAME,UAAWC,EAAQC,SAAUN,GANS,SAAAO,GAC5CX,EAAMY,QAAQD,EAAKE,UACnBR,OAIA,WACC,iBAAKG,UAAWC,EAAhB,WACC,uCACKN,EAAS,WAAY,CAAEW,UAAU,EAAMC,UAAW,OADvD,IAECP,UAAWC,EACXO,YAAY,yBAEb,gBAAKR,UAAS,UAAKC,EAAL,YAAgBH,EAAOO,UAAYJ,GAAjD,UACC,4BAC4B,cAA1B,UAAAH,EAAOO,gBAAP,eAAiBI,OAAuB,iBACd,eAA1B,UAAAX,EAAOO,gBAAP,eAAiBI,OAAwB,kCAI7C,mBAAQT,UAAWC,EAAOQ,KAAK,SAA/B,yBChCGL,EAAUM,EAAAA,GAAAA,QAEhB,GAAeC,EAAAA,EAAAA,KAHS,SAACC,GAAD,MAA0B,KAGV,CAAER,QAAAA,GAA1C,CAAqDS,GCTrD,EAAuB,mBCkBvB,EAVa,SAACrB,GACb,OACC,gBAAKQ,UAAWC,EAAhB,UACC,yBACET,EAAMsB,KADR,aACwBtB,EAAMuB,YCZjC,GAAgB,eAAiB,8BAA8B,MAAQ,qBAAqB,MAAQ,sBC4BpG,EAfgBC,EAAAA,MAAW,SAACxB,GAC3B,IAAMyB,EAAQzB,EAAMyB,MAAMC,KAAI,SAAAC,GAAI,OAAI,SAAC,EAAD,CAAoBL,KAAMK,EAAKL,KAAMC,MAAOI,EAAKJ,OAAtCI,EAAKC,OAEtD,OACC,iBAAKpB,UAAWC,EAAAA,QAAhB,UACET,EAAM6B,QAAS,SAAC,EAAD,KAEhB,iBAAKrB,UAAWC,EAAAA,eAAhB,WACC,eAAID,UAAWC,EAAAA,MAAf,uBACA,gBAAKD,UAAWC,EAAAA,MAAhB,SAA0BgB,a,mBCtB9B,EAAyB,8BAAzB,EAAoE,kCAApE,EAAoH,mCC2DpH,EAlDsB,SAACzB,GACtB,OAA4B8B,EAAAA,EAAAA,UAAS9B,EAAM+B,QAAU,IAArD,eAAOA,EAAP,KAAeC,EAAf,KACA,GAAwCF,EAAAA,EAAAA,WAAS,GAAjD,eAAOG,EAAP,KAAqBC,EAArB,MAGAC,EAAAA,EAAAA,YAAU,WACTH,EAAUhC,EAAM+B,QAAU,MACxB,CAAC/B,EAAM+B,SAwBV,OACC,eAAGvB,UAAWC,EAAU2B,cAvBC,WACrBpC,EAAM6B,OACTK,GAAgB,IAqBjB,oBAEGD,GAGD,kBACCzB,UAAWC,EACX4B,WAAS,EACTpB,KAAK,OACLqB,MAAOP,EACPQ,SAfmB,SAACC,GACvBR,EAAUQ,EAAEC,cAAcH,QAevBI,OA5BwB,WAC3BR,GAAgB,GAEZH,IAAW/B,EAAM+B,SAChBA,EAAOY,QAAU,IACpB3C,EAAM4C,aAAab,GAEnBc,MAAM,6CAaN,iBAAMrC,UAAWC,EAAjB,SAAgCT,EAAM+B,QAAU,kBC5CpD,EAAuB,6BCcvB,EANuB,SAAC,GAAD,IAAGe,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACtB,cAAGvC,UAAWC,EAAQuC,MAAgC,IAA1BD,EAAKE,QAAQ,QAAb,kBAAyCF,GAASA,EAAMG,OAAO,SAA3F,SACEJ,K,23WCVH,EAAwB,kCAAxB,EAAoE,oCAApE,EAAqH,uCAArH,EAAuK,qCCkDvK,EA9B2B,SAAC9C,GAC3B,OACC,iBAAKQ,UAAWC,EAAhB,WACC,iBAAKD,UAAWC,EAAhB,WACC,wBAAKT,EAAMmD,YACX,SAAC,EAAD,CAAetB,MAAO7B,EAAM6B,MAAOE,OAAQ/B,EAAM+B,OAAQa,aAAc5C,EAAM4C,gBAC7E,uCACW,0BAAO5C,EAAMoD,QAAUpD,EAAMoD,QAAU,sBAElD,iDACoB,0BAAOpD,EAAMqD,eAAiBrD,EAAMsD,0BAA4B,sBAGrF,gBAAK9C,UAAWC,EAAhB,SACE8C,OAAOC,KAAKxD,EAAMyD,UACjBC,QAAO,SAAAC,GAAG,OAAI3D,EAAMyD,SAASE,MAC7BjC,KAAI,SAAAiC,GACJ,OAAO,SAAC,EAAD,CAA0Bb,MAAe,aAARa,EAAqB,OAASA,EAAKZ,KAAM/C,EAAMyD,SAASE,IAApEA,QAI9B3D,EAAM6B,QACN,SAAC,KAAD,CAASiB,MAAM,OAAOtC,UAAWC,EAAYmD,GAAG,YAAhD,UACC,gBAAKC,IAAKC,EAASC,IAAI,e,UC3C5B,GAAgB,IAAM,2BAA2B,iBAAmB,wCAAwC,OAAS,8BAA8B,KAAO,4BAA4B,YAAc,mCAAmC,iBAAmB,wCAAwC,KAAO,4BAA4B,IAAM,2BAA2B,OAAS,+BCuF/W,EA1EsB,SAAC/D,GAAmB,IAAD,gBACxC,GAAoC8B,EAAAA,EAAAA,WAAS,GAA7C,eAAOkC,EAAP,KAAmBC,EAAnB,KACA,GAA0BnC,EAAAA,EAAAA,YAA1B,eAAOoC,EAAP,KAAcC,EAAd,KACA,GAA8BrC,EAAAA,EAAAA,WAAS,GAAvC,eAAOsC,EAAP,KAAgBC,EAAhB,KAqBA,OACC,iCACC,iBAAK7D,UAAWC,EAAAA,IAAhB,WACC,gBACCD,UAAWC,EAAAA,OACXoD,IACC,UAAA7D,EAAMsE,qBAAN,SAAqBC,OAArB,UAA8BvE,EAAMsE,qBAApC,OAA8B,EAAqBE,OAChD,UAAAxE,EAAMsE,qBAAN,eAAqBC,SAArB,UAA8BvE,EAAMsE,qBAApC,aAA8B,EAAqBE,OACnDC,IAGJzE,EAAM6B,QAAS,gBAAKiB,MAAM,OAAOtC,UAAWC,EAAAA,KAAQoD,IAAKC,EAASC,IAAI,OAAOW,QAAS,kBAAMT,GAAc,SAE3GD,IACA,iBAAKxD,UAAWC,EAAAA,YAAhB,WACC,gBAAKD,UAAWC,EAAAA,MAAhB,UACC,gBACCD,UAAWC,EAAAA,OACXoD,IACEK,EAAD,OAIGA,QAJH,IAIGA,OAJH,EAIGA,EAAOS,KAHP,UAAA3E,EAAMsE,qBAAN,SAAqBC,OAArB,UAA8BvE,EAAMsE,qBAApC,OAA8B,EAAqBE,OAClD,UAAAxE,EAAMsE,qBAAN,eAAqBC,SAArB,UAA8BvE,EAAMsE,qBAApC,aAA8B,EAAqBE,OACnDC,EAGLV,IAAI,aAGN,iBAAKvD,UAAWC,EAAAA,MAAhB,WACC,kBAAOQ,KAAK,OAAOT,UAAWC,EAAAA,KAAQ8B,SAhDnB,SAACC,GACxB,IAAMoC,EAAQpC,EAAEC,cAAcmC,MAC9B,OAAIA,QAAJ,IAAIA,GAAAA,EAAOjC,QACVwB,EAASS,EAAM,IACfP,GAAW,IAEXA,GAAW,MA2CPD,IAAW,cAAG5D,UAAU,QAAb,mCAEb,iBAAKA,UAAU,gBAAf,WACC,mBACCA,UAAS,UAAKC,EAAAA,IAAL,YAAcA,EAAAA,QACvBiE,QAAS,WACRT,GAAc,IAHhB,qBAOA,mBAAQzD,UAAS,UAAKC,EAAAA,IAAL,YAAcA,EAAAA,MAAUiE,QAjD1B,WACfR,GACHlE,EAAM6E,UAAUX,GAChBD,GAAc,IAEdI,GAAW,IA4CR,4BC7EN,EAAuB,mBCkCvB,EAlBa,SAACrE,GAAmB,IAAD,YAC/B,OACC,iBAAKQ,UAAWC,EAAhB,WACC,SAAC,EAAD,CAAeoB,MAAO7B,EAAM6B,MAAOgD,UAAW7E,EAAM6E,UAAWP,cAAa,UAAEtE,EAAM8E,eAAR,aAAE,EAAeC,UAC7F,SAAC,EAAD,CACClD,MAAO7B,EAAM6B,MACbsB,SAAQ,UAAEnD,EAAM8E,eAAR,aAAE,EAAe3B,SACzBC,QAAO,UAAEpD,EAAM8E,eAAR,aAAE,EAAe1B,QACxBC,eAAc,UAAErD,EAAM8E,eAAR,aAAE,EAAezB,eAC/BC,0BAAyB,UAAEtD,EAAM8E,eAAR,aAAE,EAAexB,0BAC1CvB,OAAQ/B,EAAM+B,OACd0B,SAAQ,UAAEzD,EAAM8E,eAAR,aAAE,EAAerB,SACzBb,aAAc5C,EAAM4C,mB,kBC5BxB,EAA0B,yBAA1B,EAA8F,yBC6F9F,EA5EgB,WAEf,IAAMoC,GAAWC,EAAAA,EAAAA,MACPC,GAAOC,EAAAA,EAAAA,MAAXvD,GAGAkD,GAAUM,EAAAA,EAAAA,IAAYC,EAAAA,IACtBtD,GAASqD,EAAAA,EAAAA,IAAYE,EAAAA,IACrB7D,GAAQ2D,EAAAA,EAAAA,IAAYG,EAAAA,IACpBC,GAASJ,EAAAA,EAAAA,IAAYK,EAAAA,IACrBC,GAASN,EAAAA,EAAAA,IAAYO,EAAAA,IAGrBC,GAA4BC,EAAAA,EAAAA,MAU5BC,EAAiB,WAElBlE,IAAOmE,MAAMnE,KACL,OAAPkD,QAAO,IAAPA,OAAA,EAAAA,EAASkB,UAAWpE,GACvBgE,GAASK,EAAAA,EAAAA,IAAoBrE,MAMhCO,EAAAA,EAAAA,YAAU,WAIT,OAHA2D,IAGO,WACNF,EAAS1E,EAAAA,GAAAA,gBAER,IAGH,IACIgF,EADAtE,EAAauE,OAAOjB,GAGlBkB,EC9DoB,SAAI9D,GAG9B,IAAM+D,GAAWC,EAAAA,EAAAA,UAQjB,OALAnE,EAAAA,EAAAA,YAAU,WACTkE,EAAIE,QAAUjE,IACZ,CAACA,IAGG+D,EAAIE,QDmDIC,CAAY5E,IAC3BO,EAAAA,EAAAA,YAAU,WACJuD,GAAWF,IAAUO,MAAMP,IAC/BR,EAAS,UAENpD,KAAQmE,MAAMK,GAAUxE,EAAKwE,IAASN,MACxC,CAAClE,IAGJsE,KAAWtE,GAAMmE,MAAMnE,IAEvB,IAAMC,EAAQ2D,IAAW5D,EAGzB,OAAKsE,EAGApB,GAIJ,oBAAStE,UAAWC,EAApB,UACC,iBAAKD,UAAWC,EAAhB,WACC,SAAC,EAAD,CAAMoB,MAAOA,EAAOiD,QAASA,EAASD,UArDvB,SAACX,GAClB0B,GAASa,EAAAA,EAAAA,IAAevC,KAoDsCnC,OAAQA,EAAQa,aAlD1D,SAACb,GACrB6D,GAASc,EAAAA,EAAAA,IAAkB3E,QAkDzB,SAAC4E,EAAD,CAAOlF,MAAOA,EAAOI,MAAOA,UANvB,SAAC+E,EAAA,EAAD,KAHA,SAACC,EAAA,EAAD,M,4HE7EF,IAAMxB,EAAa,SAACjE,GAAD,OAAyBA,EAAM0F,YAAYhC,SACxDQ,EAAY,SAAClE,GAAD,OAAyBA,EAAM0F,YAAY/E,QACvDwD,EAAW,SAACnE,GAAD,OAAyBA,EAAM0F,YAAYrF,OACtDsF,EAAmB,SAAC3F,GAAD,OAAyBA,EAAMd,OAAO0G,cAAcC,W","sources":["webpack:///./src/components/Profile/Posts/PostForm/PostForm.module.scss?9988","components/Profile/Posts/PostForm/PostForm.tsx","components/Profile/Posts/PostForm/PostFormContainer.tsx","webpack:///./src/components/Profile/Posts/Post/Post.module.scss?3df6","components/Profile/Posts/Post/Post.tsx","webpack:///./src/components/Profile/Posts/Posts.module.scss?d335","components/Profile/Posts/Posts.tsx","webpack:///./src/components/Profile/User/ProfileDescription/ProfileStatus/ProfileStatus.module.scss?6b62","components/Profile/User/ProfileDescription/ProfileStatus/ProfileStatus.tsx","webpack:///./src/components/Profile/User/ProfileDescription/ProfileContact/ProfileContact.module.scss?7387","components/Profile/User/ProfileDescription/ProfileContact/ProfileContact.tsx","webpack:///./src/components/Profile/User/ProfileDescription/ProfileDescription.module.scss?cac7","components/Profile/User/ProfileDescription/ProfileDescription.tsx","webpack:///./src/components/Profile/User/ProfileAvatar/ProfileAvatar.module.scss?e1c3","components/Profile/User/ProfileAvatar/ProfileAvatar.tsx","webpack:///./src/components/Profile/User/User.module.scss?cbf5","components/Profile/User/User.tsx","webpack:///./src/components/Profile/Profile.module.scss?4008","components/Profile/Profile.tsx","hooks/usePrevious.ts","selectors/profile-selectors.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"PostForm_form__U-TXJ\",\"formBlock\":\"PostForm_formBlock__4yzuW\",\"textarea\":\"PostForm_textarea__-W9JM\",\"btn\":\"PostForm_btn__TYpHw\",\"error\":\"PostForm_error__JiD8S\",\"show\":\"PostForm_show__qzOev\"};","import React from 'react'\r\nimport { useForm, SubmitHandler } from 'react-hook-form'\r\n\r\nimport s from './PostForm.module.scss'\r\n\r\ntype TFormValues = {\r\n\tpostText: string\r\n}\r\ntype TProps = {\r\n\taddPost: (text: string) => void\r\n}\r\n\r\nconst PostForm = (props: any) => {\r\n\tconst {\r\n\t\tregister,\r\n\t\thandleSubmit,\r\n\t\treset,\r\n\t\tformState: { errors }\r\n\t} = useForm<TFormValues>({ mode: 'onBlur' })\r\n\r\n\tconst onSubmit: SubmitHandler<TFormValues> = data => {\r\n\t\tprops.addPost(data.postText)\r\n\t\treset()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form className={s.form} onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t<div className={s.formBlock}>\r\n\t\t\t\t<textarea\r\n\t\t\t\t\t{...register('postText', { required: true, maxLength: 100 })}\r\n\t\t\t\t\tclassName={s.textarea}\r\n\t\t\t\t\tplaceholder='Print something...'\r\n\t\t\t\t/>\r\n\t\t\t\t<div className={`${s.error} ${errors.postText && s.show}`}>\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t{errors.postText?.type === 'required' && 'Fill the input'}\r\n\t\t\t\t\t\t{errors.postText?.type === 'maxLength' && 'Text max length is 100'}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<button className={s.btn} type='submit'>\r\n\t\t\t\tpublish\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default PostForm\r\n","import { connect } from 'react-redux'\r\n\r\nimport { profileActions } from '../../../../redux/profileReducer'\r\nimport { AppStateType } from '../../../../redux/redux-store'\r\n\r\nimport PostForm from './PostForm'\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({})\r\nconst addPost = profileActions.addPost\r\n\r\nexport default connect(mapStateToProps, { addPost })(PostForm)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__mNY4C\"};","import React from 'react'\r\n\r\nimport s from './Post.module.scss'\r\n\r\ntype TProps = {\r\n\ttext: string\r\n\tlikes: number\r\n}\r\n\r\nconst Post = (props: TProps) => {\r\n\treturn (\r\n\t\t<div className={s.post}>\r\n\t\t\t<p>\r\n\t\t\t\t{props.text} | likes: {props.likes}\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Post\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsContainer\":\"Posts_postsContainer__PN-QU\",\"title\":\"Posts_title__TCUqV\",\"posts\":\"Posts_posts__3bcT2\"};","import React from 'react'\r\n\r\nimport FormContainer from './PostForm/PostFormContainer'\r\nimport Post from './Post/Post'\r\n\r\nimport { TPost } from '../../../types/types' // type\r\nimport s from './Posts.module.scss'\r\n\r\ntype TProps = {\r\n\tposts: Array<TPost>\r\n\towner: boolean\r\n}\r\n\r\n// React.memo it's like HOC\r\nconst MyPosts = React.memo((props: TProps) => {\r\n\tconst posts = props.posts.map(post => <Post key={post.id} text={post.text} likes={post.likes} />)\r\n\r\n\treturn (\r\n\t\t<div className={s.publish}>\r\n\t\t\t{props.owner && <FormContainer />}\r\n\r\n\t\t\t<div className={s.postsContainer}>\r\n\t\t\t\t<h1 className={s.title}>My posts</h1>\r\n\t\t\t\t<div className={s.posts}>{posts}</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n})\r\n\r\nexport default MyPosts\r\n","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"ProfileStatus_status__PDFmq\",\"statusText\":\"ProfileStatus_statusText__SYltV\",\"statusInput\":\"ProfileStatus_statusInput__v341J\"};","import React, { useState, useEffect } from 'react'\r\n\r\nimport s from './ProfileStatus.module.scss'\r\n\r\ntype TProps = {\r\n\towner: boolean\r\n\tstatus: null | string\r\n\tupdateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus = (props: TProps) => {\r\n\tconst [status, setStatus] = useState(props.status || '')\r\n\tconst [editDescMode, setEditDescMode] = useState(false)\r\n\r\n\t// for status\r\n\tuseEffect(() => {\r\n\t\tsetStatus(props.status || '')\r\n\t}, [props.status])\r\n\r\n\tconst activatedEditMode = () => {\r\n\t\tif (props.owner) {\r\n\t\t\tsetEditDescMode(true)\r\n\t\t}\r\n\t}\r\n\r\n\tconst deactivatedEditMode = () => {\r\n\t\tsetEditDescMode(false)\r\n\r\n\t\tif (status !== props.status) {\r\n\t\t\tif (status.length <= 300) {\r\n\t\t\t\tprops.updateStatus(status)\r\n\t\t\t} else {\r\n\t\t\t\talert('max status length must be below 300!')\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst onStatusChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n\t\tsetStatus(e.currentTarget.value)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<p className={s.status} onDoubleClick={activatedEditMode}>\r\n\t\t\tStatus:\r\n\t\t\t{!editDescMode ? (\r\n\t\t\t\t<span className={s.statusText}>{props.status || 'no status'}</span>\r\n\t\t\t) : (\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName={s.statusInput}\r\n\t\t\t\t\tautoFocus\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tvalue={status}\r\n\t\t\t\t\tonChange={onStatusChange}\r\n\t\t\t\t\tonBlur={deactivatedEditMode}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</p>\r\n\t)\r\n}\r\n\r\nexport default ProfileStatus\r\n","// extracted by mini-css-extract-plugin\nexport default {\"link\":\"ProfileContact_link__G0pbY\"};","import React from 'react'\r\n\r\nimport s from './ProfileContact.module.scss'\r\n\r\ntype TProps = {\r\n\ttitle: string\r\n\tlink: string\r\n}\r\n\r\nconst ProfileContact = ({ title, link }: TProps) => (\r\n\t<a className={s.link} href={link.indexOf('http') === -1 ? `https://${link}` : link} target='_blank'>\r\n\t\t{title}\r\n\t</a>\r\n)\r\n\r\nexport default ProfileContact\r\n","// extracted by mini-css-extract-plugin\nexport default {\"about\":\"ProfileDescription_about__CkMtV\",\"topPart\":\"ProfileDescription_topPart__k9fba\",\"bottomPart\":\"ProfileDescription_bottomPart__rF9ly\",\"editMode\":\"ProfileDescription_editMode__3uKAH\"};","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport ProfileStatus from './ProfileStatus/ProfileStatus'\r\nimport ProfileContact from './ProfileContact/ProfileContact'\r\n\r\nimport editSVG from '../../../../assets/img/pencil.png'\r\nimport s from './ProfileDescription.module.scss'\r\nimport { TContacts } from '../../../../types/types'\r\n\r\ntype TProps = {\r\n\towner: boolean\r\n\tfullName: string\r\n\taboutMe: string\r\n\tlookingForAJob: boolean\r\n\tlookingForAJobDescription: string\r\n\tcontacts: TContacts\r\n\tstatus: null | string\r\n\tupdateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileDescription = (props: TProps) => {\r\n\treturn (\r\n\t\t<div className={s.about}>\r\n\t\t\t<div className={s.topPart}>\r\n\t\t\t\t<h2>{props.fullName}</h2>\r\n\t\t\t\t<ProfileStatus owner={props.owner} status={props.status} updateStatus={props.updateStatus} />\r\n\t\t\t\t<p>\r\n\t\t\t\t\tAbout Me: <span>{props.aboutMe ? props.aboutMe : 'nothing found'}</span>\r\n\t\t\t\t</p>\r\n\t\t\t\t<h3>\r\n\t\t\t\t\tLooking for a job: <span>{props.lookingForAJob ? props.lookingForAJobDescription : 'have a job'}</span>\r\n\t\t\t\t</h3>\r\n\t\t\t</div>\r\n\t\t\t<div className={s.bottomPart}>\r\n\t\t\t\t{Object.keys(props.contacts)\r\n\t\t\t\t\t.filter(key => props.contacts[key])\r\n\t\t\t\t\t.map(key => {\r\n\t\t\t\t\t\treturn <ProfileContact key={key} title={key === 'mainLink' ? 'main' : key} link={props.contacts[key]} />\r\n\t\t\t\t\t})}\r\n\t\t\t</div>\r\n\r\n\t\t\t{props.owner && (\r\n\t\t\t\t<NavLink title='edit' className={s.editMode} to='/settings'>\r\n\t\t\t\t\t<img src={editSVG} alt='edit' />\r\n\t\t\t\t</NavLink>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ProfileDescription\r\n","// extracted by mini-css-extract-plugin\nexport default {\"img\":\"ProfileAvatar_img__TwRUM\",\"animatedGradient\":\"ProfileAvatar_animatedGradient__ONUfn\",\"avatar\":\"ProfileAvatar_avatar__Kmqmd\",\"edit\":\"ProfileAvatar_edit__70Pr4\",\"ModalWindow\":\"ProfileAvatar_ModalWindow__-fq3V\",\"appearanceModalW\":\"ProfileAvatar_appearanceModalW__NPubz\",\"file\":\"ProfileAvatar_file__3IQac\",\"btn\":\"ProfileAvatar_btn__Qw3SI\",\"cancel\":\"ProfileAvatar_cancel__piff7\"};","import React, { useState } from 'react'\r\n\r\nimport editSVG from '../../../../assets/img/pencil.png'\r\nimport haveNotImage from '../../../../assets/img/blank-profile-picture.webp'\r\n\r\nimport { TPhotos } from '../../../../types/types'\r\nimport s from './ProfileAvatar.module.scss'\r\n\r\ntype TProps = {\r\n\tprofilePhotos: TPhotos\r\n\towner: boolean\r\n\tsavePhoto: (photo: File) => void\r\n}\r\n\r\nconst ProfileAvatar = (props: TProps) => {\r\n\tconst [editAvatar, setEditAvatar] = useState(false)\r\n\tconst [photo, setPhoto] = useState<File>()\r\n\tconst [isError, setIsError] = useState(false)\r\n\r\n\tconst onPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst files = e.currentTarget.files\r\n\t\tif (files?.length) {\r\n\t\t\tsetPhoto(files[0])\r\n\t\t\tsetIsError(false)\r\n\t\t} else {\r\n\t\t\tsetIsError(true)\r\n\t\t}\r\n\t}\r\n\r\n\tconst onSavePhoto = () => {\r\n\t\tif (photo) {\r\n\t\t\tprops.savePhoto(photo)\r\n\t\t\tsetEditAvatar(false)\r\n\t\t} else {\r\n\t\t\tsetIsError(true)\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className={s.img}>\r\n\t\t\t\t<img\r\n\t\t\t\t\tclassName={s.avatar}\r\n\t\t\t\t\tsrc={\r\n\t\t\t\t\t\tprops.profilePhotos?.large || props.profilePhotos?.small\r\n\t\t\t\t\t\t\t? props.profilePhotos?.large || props.profilePhotos?.small\r\n\t\t\t\t\t\t\t: haveNotImage\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t{props.owner && <img title='edit' className={s.edit} src={editSVG} alt='edit' onClick={() => setEditAvatar(true)} />}\r\n\t\t\t</div>\r\n\t\t\t{editAvatar && (\r\n\t\t\t\t<div className={s.ModalWindow}>\r\n\t\t\t\t\t<div className={s.block}>\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tclassName={s.avatar}\r\n\t\t\t\t\t\t\tsrc={\r\n\t\t\t\t\t\t\t\t!photo\r\n\t\t\t\t\t\t\t\t\t? props.profilePhotos?.large || props.profilePhotos?.small\r\n\t\t\t\t\t\t\t\t\t\t? props.profilePhotos?.large || props.profilePhotos?.small\r\n\t\t\t\t\t\t\t\t\t\t: haveNotImage\r\n\t\t\t\t\t\t\t\t\t: photo?.name\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\talt='photo'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={s.block}>\r\n\t\t\t\t\t\t<input type='file' className={s.file} onChange={onPhotoSelected} />\r\n\t\t\t\t\t\t{isError && <p className='error'>File not selected</p>}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='block buttons'>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName={`${s.btn} ${s.cancel}`}\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetEditAvatar(false)\r\n\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\tCancel\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button className={`${s.btn} ${s.save}`} onClick={onSavePhoto}>\r\n\t\t\t\t\t\t\tSave\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default ProfileAvatar\r\n","// extracted by mini-css-extract-plugin\nexport default {\"user\":\"User_user__dFRb9\"};","import React from 'react'\r\n\r\nimport ProfileDescription from './ProfileDescription/ProfileDescription'\r\nimport ProfileAvatar from './ProfileAvatar/ProfileAvatar'\r\n\r\nimport { TContacts, TPhotos, TProfile } from '../../../types/types' // types\r\nimport s from './User.module.scss'\r\n\r\ntype TProps = {\r\n\tprofile: null | TProfile\r\n\tstatus: null | string\r\n\towner: boolean\r\n\t// dispatch\r\n\tupdateStatus: (status: string) => void\r\n\tsavePhoto: (photo: File) => void\r\n}\r\n\r\nconst User = (props: TProps) => {\r\n\treturn (\r\n\t\t<div className={s.user}>\r\n\t\t\t<ProfileAvatar owner={props.owner} savePhoto={props.savePhoto} profilePhotos={props.profile?.photos as TPhotos} />\r\n\t\t\t<ProfileDescription\r\n\t\t\t\towner={props.owner}\r\n\t\t\t\tfullName={props.profile?.fullName as string}\r\n\t\t\t\taboutMe={props.profile?.aboutMe as string}\r\n\t\t\t\tlookingForAJob={props.profile?.lookingForAJob as boolean}\r\n\t\t\t\tlookingForAJobDescription={props.profile?.lookingForAJobDescription as string}\r\n\t\t\t\tstatus={props.status}\r\n\t\t\t\tcontacts={props.profile?.contacts as TContacts}\r\n\t\t\t\tupdateStatus={props.updateStatus}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default User\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__IOx7L\",\"poster\":\"Profile_poster__QRwEf\",\"wrapper\":\"Profile_wrapper__rTTgn\"};","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { usePrevious } from '../../hooks/usePrevious'\r\n//components\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport Error404 from '../errors/Error404/Error404'\r\nimport Posts from './Posts/Posts'\r\nimport User from './User/User'\r\n// selectors\r\nimport { getAuth, getDataID } from '../../selectors/auth-selectors'\r\nimport { getPosts, getStatus, getProfile } from '../../selectors/profile-selectors'\r\n// types\r\nimport { AppDispatchType } from '../../redux/redux-store'\r\n// styles\r\nimport s from './Profile.module.scss'\r\nimport { getFullProfileThunk, profileActions, savePhotoThunk, updateStatusThunk } from '../../redux/profileReducer'\r\n\r\nconst Profile = () => {\r\n\t// hooks\r\n\tconst navigate = useNavigate()\r\n\tlet { id: ID } = useParams()\r\n\r\n\t// selectors\r\n\tconst profile = useSelector(getProfile)\r\n\tconst status = useSelector(getStatus)\r\n\tconst posts = useSelector(getPosts)\r\n\tconst selfID = useSelector(getDataID)\r\n\tconst isAuth = useSelector(getAuth)\r\n\r\n\t// dispatch\r\n\tconst dispatch: AppDispatchType = useDispatch()\r\n\r\n\t// functions\r\n\tconst savePhoto = (photo: File) => {\r\n\t\tdispatch(savePhotoThunk(photo))\r\n\t}\r\n\tconst updateStatus = (status: string) => {\r\n\t\tdispatch(updateStatusThunk(status))\r\n\t}\r\n\r\n\tconst refreshProfile = () => {\r\n\t\t// i check existing id for... aa... just in case)\r\n\t\tif (id && !isNaN(id)) {\r\n\t\t\tif (profile?.userId !== id) {\r\n\t\t\t\tdispatch(getFullProfileThunk(id))\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// component did mount\r\n\tuseEffect(() => {\r\n\t\trefreshProfile()\r\n\r\n\t\t// component will unmount\r\n\t\treturn () => {\r\n\t\t\tdispatch(profileActions.resetPage())\r\n\t\t}\r\n\t}, [])\r\n\r\n\t// checking is user authorized\r\n\tlet id: number = Number(ID)\r\n\tlet isFound = true\r\n\r\n\tconst prevID = usePrevious(id)\r\n\tuseEffect(() => {\r\n\t\tif (!isAuth || !selfID || isNaN(selfID)) {\r\n\t\t\tnavigate('/login')\r\n\t\t}\r\n\t\tif (id !== (isNaN(prevID) ? id : prevID)) refreshProfile()\r\n\t}, [id])\r\n\r\n\t// fucking useEffect!\r\n\tisFound = !id || isNaN(id) ? false : true\r\n\r\n\tconst owner = selfID === id\r\n\r\n\t// render\r\n\tif (!isFound) {\r\n\t\treturn <Error404 />\r\n\t}\r\n\tif (!profile) {\r\n\t\treturn <Preloader />\r\n\t}\r\n\treturn (\r\n\t\t<section className={s.profile}>\r\n\t\t\t<div className={s.wrapper}>\r\n\t\t\t\t<User owner={owner} profile={profile} savePhoto={savePhoto} status={status} updateStatus={updateStatus} />\r\n\t\t\t\t<Posts posts={posts} owner={owner} />\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default Profile\r\n","import { useEffect, useRef } from 'react'\r\n\r\nexport const usePrevious = <T>(value: T) => {\r\n\t// The ref object is a generic container whose current property is mutable ...\r\n\t// ... and can hold any value, similar to an instance property on a class\r\n\tconst ref: any = useRef<T>()\r\n\r\n\t// Store current value in ref\r\n\tuseEffect(() => {\r\n\t\tref.current = value\r\n\t}, [value]) // Only re-run if value changes\r\n\r\n\t// Return previous value (happens before update in useEffect above)\r\n\treturn ref.current\r\n}\r\n","import { AppStateType } from '../redux/redux-store'\r\n\r\nexport const getProfile = (state: AppStateType) => state.profilePage.profile\r\nexport const getStatus = (state: AppStateType) => state.profilePage.status\r\nexport const getPosts = (state: AppStateType) => state.profilePage.posts\r\nexport const getErrorMessages = (state: AppStateType) => state.errors.profileErrors.messages\r\n"],"names":["props","useForm","mode","register","handleSubmit","reset","errors","formState","className","s","onSubmit","data","addPost","postText","required","maxLength","placeholder","type","profileActions","connect","state","PostForm","text","likes","React","posts","map","post","id","owner","useState","status","setStatus","editDescMode","setEditDescMode","useEffect","onDoubleClick","autoFocus","value","onChange","e","currentTarget","onBlur","length","updateStatus","alert","title","link","href","indexOf","target","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","filter","key","to","src","editSVG","alt","editAvatar","setEditAvatar","photo","setPhoto","isError","setIsError","profilePhotos","large","small","haveNotImage","onClick","name","files","savePhoto","profile","photos","navigate","useNavigate","ID","useParams","useSelector","getProfile","getStatus","getPosts","selfID","getDataID","isAuth","getAuth","dispatch","useDispatch","refreshProfile","isNaN","userId","getFullProfileThunk","isFound","Number","prevID","ref","useRef","current","usePrevious","savePhotoThunk","updateStatusThunk","Posts","Preloader","Error404","profilePage","getErrorMessages","profileErrors","messages"],"sourceRoot":""}